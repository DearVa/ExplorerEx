<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:m="clr-namespace:ExplorerEx.Model" 
                    xmlns:u="clr-namespace:ExplorerEx.Utils" 
                    xmlns:ct="clr-namespace:ExplorerEx.View.Controls" 
                    xmlns:hc="https://handyorg.github.io/handycontrol"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">

    <Style TargetType="ct:SideBarContent">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid d:DataContext="{d:DesignInstance ct:SideBarContent}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Grid.Triggers>
                            <EventTrigger SourceName="SearchToggleButton" RoutedEvent="ToggleButton.Checked">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Height" Storyboard.TargetName="SearchBoxGrid" To="40" Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                            <EventTrigger SourceName="SearchToggleButton" RoutedEvent="ToggleButton.Unchecked">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Height" Storyboard.TargetName="SearchBoxGrid" To="0" Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Grid.Triggers>

                        <hc:SimplePanel x:Name="SearchBoxGrid" Grid.Row="1" Height="0" ClipToBounds="True" Background="{DynamicResource RegionBrush}"
                                        Visibility="{Binding ShowSearchButton, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}">
                            <hc:TextBox x:Name="SearchTextBox" Margin="5,0,5,5" Height="30" VerticalAlignment="Bottom" ShowClearButton="True" 
                                        hc:InfoElement.Placeholder="{u:Lang Search}" Foreground="{DynamicResource PrimaryTextBrush}"/>
                        </hc:SimplePanel>

                        <Border Grid.Row="0" Margin="0,10,0,0" CornerRadius="5,5,0,0" Background="{DynamicResource RegionBrush}">
                            <hc:SimplePanel>
                                <TextBlock VerticalAlignment="Center" Margin="10,0,0,0" Text="{Binding Header, Mode=OneWay}" 
                                           FontSize="14" Foreground="{DynamicResource PrimaryTextBrush}"/>
                                <StackPanel HorizontalAlignment="Right" Margin="0,0,10,0" Orientation="Horizontal">
                                    <ContentPresenter Content="{Binding HeaderContent, Mode=OneWay}"/>
                                    <ToggleButton x:Name="SearchToggleButton" hc:IconElement.Icon="{StaticResource SearchGeometry}" 
                                                  Style="{StaticResource ToggleButtonTransparent}" Width="25" Height="25" Padding="5"
                                                  Visibility="{Binding ShowSearchButton, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                                                  Margin="10,0,0,0" ToolTip="{u:Lang Search}"/>
                                </StackPanel>
                            </hc:SimplePanel>
                        </Border>

                        <hc:SimplePanel Grid.Row="2" Background="{DynamicResource RegionBrush}">
                            <ContentPresenter x:Name="DragArea" Content="{Binding Content, Mode=OneWay}" AllowDrop="true"/>
                            <ContentPresenter x:Name="DragTipPanel" Opacity="0" IsHitTestVisible="False" Content="{Binding DragTip}"/>
                        </hc:SimplePanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ct:FluentTabControl">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="TabItem" BasedOn="{StaticResource TabItemStyle}">
                    <Style.Resources>
                        <CubicEase x:Key="CubicEase" EasingMode="EaseInOut"/>
                    </Style.Resources>
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <ItemContainerTemplate>
                                <ContentPresenter Content="{Binding}" Height="40" AllowDrop="True" ToolTipService.InitialShowDelay="300"/>
                            </ItemContainerTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Height" Value="40"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <StackPanel x:Name="headerPanel" Grid.Column="0" Margin="{TemplateBinding Padding}" Panel.ZIndex="1" KeyboardNavigation.TabIndex="1" VerticalAlignment="Top">
                            <hc:Interaction.Triggers>
                                <hc:RoutedEventTrigger RoutedEvent="TabItem.PreviewMouseDown">
                                    <hc:EventToCommand Command="{Binding TabItemPreviewMouseDownCommand, RelativeSource={RelativeSource AncestorType=ct:FluentTabControl}}" PassEventArgsToCommand="True"/>
                                </hc:RoutedEventTrigger>
                                <hc:RoutedEventTrigger RoutedEvent="TabItem.PreviewMouseUp">
                                    <hc:EventToCommand Command="{Binding TabItemPreviewMouseUpCommand, RelativeSource={RelativeSource AncestorType=ct:FluentTabControl}}" PassEventArgsToCommand="True"/>
                                </hc:RoutedEventTrigger>
                            </hc:Interaction.Triggers>
                            <ItemsPresenter ClipToBounds="True"/>
                        </StackPanel>
                        <hc:SimplePanel Grid.Column="0" Margin="{TemplateBinding Padding}" VerticalAlignment="Top" Height="{Binding ActualHeight, ElementName=headerPanel}" Panel.ZIndex="2" ClipToBounds="true">
                            <ct:FluentBorder x:Name="FluentBorder" IsHitTestVisible="False" Margin="4,0,0,0" Width="3" Height="24" CornerRadius="1.5" Background="{DynamicResource PrimaryBrush}" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                        </hc:SimplePanel>
                        <Border x:Name="ContentPanel" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="1" ClipToBounds="True"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <hc:TransitioningContentControl TransitionMode="Left2RightWithFade">
                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </hc:TransitioningContentControl>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ct:FluentExpander"></Style>

    <Style BasedOn="{StaticResource TreeViewItemBaseStyle}" TargetType="ct:ClickableTreeViewItem">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <Grid d:DataContext="{d:DesignInstance ct:ClickableTreeViewItem}">
                        <Grid.RowDefinitions>
                            <RowDefinition MinHeight="{StaticResource DefaultControlHeight}"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border x:Name="Bd" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <DockPanel LastChildFill="True" Margin="{Binding Converter={StaticResource TreeViewItemMarginConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                                <hc:SimplePanel>
                                    <Button Cursor="Hand" VerticalAlignment="Center" HorizontalAlignment="Left" BorderThickness="0" Background="Transparent" Padding="0">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="30"/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>

                                            <Image Grid.Column="0" Margin="5" Stretch="Uniform" Source="{Binding Icon}"/>
                                            <TextBlock Grid.Column="1" VerticalAlignment="Center" Text="{Binding Header}" FontSize="13" Margin="0,0,10,0"/>
                                        </Grid>
                                    </Button>
                                </hc:SimplePanel>
                            </DockPanel>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true" SourceName="Bd">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource PrimaryBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource PrimaryBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="ct:AddressBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border" CornerRadius="4" BorderBrush="{x:Null}" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Cursor="IBeam">
                        <hc:SimplePanel>
                            <ScrollViewer hc:ScrollViewerAttach.Orientation="Horizontal" Padding="{TemplateBinding Padding}" Margin="-2,0,-1,0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Visibility="Collapsed" />
                            <ScrollViewer x:Name="ScrollViewer" hc:ScrollViewerAttach.Orientation="Horizontal" Cursor="Hand" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Auto" HorizontalAlignment="Left" Margin="0,0,50,0">
                                <ItemsControl Padding="3" ItemsSource="{Binding Path=Items, RelativeSource={RelativeSource AncestorType=ct:AddressBar}}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <ItemContainerTemplate>
                                            <StackPanel Orientation="Horizontal" d:DataContext="{d:DesignInstance m:FolderOnlyItem}">
                                                <Button Padding="3" Content="{Binding DisplayText, Mode=OneWay}"
                                                        Command="{Binding ItemClickedCommand, RelativeSource={RelativeSource AncestorType=ct:AddressBar}}"
                                                        CommandParameter="{Binding}" Style="{StaticResource ButtonTransparent}"/>
                                                <ToggleButton x:Name="ExpandButton" Padding="3" BorderThickness="0" hc:IconElement.Icon="{StaticResource RightGeometry}"
                                                              hc:IconElement.Width="5" hc:IconSwitchElement.IconSelected="{StaticResource DownGeometry}"
                                                              IsChecked="{Binding IsExpanded, Mode=TwoWay}" Style="{StaticResource ToggleButtonTransparent}"/>
                                                <Popup AllowsTransparency="True" hc:BlurPopup.Enabled="True" StaysOpen="False" PlacementTarget="{Binding ElementName=ExpandButton}"
                                                       IsOpen="{Binding IsExpanded, Mode=TwoWay}">
                                                    <hc:Interaction.Triggers>
                                                        <hc:RoutedEventTrigger RoutedEvent="MenuItem.Click">
                                                            <hc:EventToCommand Command="{Binding ItemClickedCommand, RelativeSource={RelativeSource AncestorType=ct:AddressBar}}" PassEventArgsToCommand="True"/>
                                                        </hc:RoutedEventTrigger>
                                                    </hc:Interaction.Triggers>
                                                    <ScrollViewer Margin="3" Background="#01FFFFFF">
                                                        <Menu ItemsSource="{Binding Children, Mode=OneWay}">
                                                            <Menu.ItemsPanel>
                                                                <ItemsPanelTemplate>
                                                                    <StackPanel/>
                                                                </ItemsPanelTemplate>
                                                            </Menu.ItemsPanel>
                                                            <Menu.ItemContainerStyle>
                                                                <Style BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="MenuItem">
                                                                    <Setter Property="Icon" Value="{Binding Icon, Mode=OneWay}"/>
                                                                    <Setter Property="Header" Value="{Binding DisplayText, Mode=OneWay}"/>
                                                                    <Setter Property="FontSize" Value="14"/>
                                                                    <Setter Property="IsEnabled" Value="{Binding IsEnabled, Mode=OneWay}"/>
                                                                </Style>
                                                            </Menu.ItemContainerStyle>
                                                        </Menu>
                                                    </ScrollViewer>
                                                </Popup>
                                            </StackPanel>
                                        </ItemContainerTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </ScrollViewer>
                            <Border CornerRadius="4" BorderThickness="0,0,0,2" BorderBrush="{TemplateBinding BorderBrush}" Background="{x:Null}" SnapsToDevicePixels="True" IsHitTestVisible="False"/>
                            <Border x:Name="mask" Panel.ZIndex="2" CornerRadius="2" Background="{TemplateBinding BorderBrush}" Opacity="0" IsHitTestVisible="False"/>
                        </hc:SimplePanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.4" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="mask" Duration="0:0:0.1" To="0.4" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="mask" Duration="0:0:0.1" To="0" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PrimaryBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ContextMenu x:Key="TabItemExMenu" x:Shared="False" d:DataContext="{d:DesignInstance ct:FileTabItem}">
        <MenuItem Command="hc:ControlCommands.TabCommand" CommandParameter="Duplicate" Header="{u:Lang DuplicateTab}"/>
        <MenuItem IsEnabled="{Binding CanMoveToNewWindow}" Command="hc:ControlCommands.TabCommand" CommandParameter="Move2NewWindow" Header="{u:Lang MoveToNewWindow}">
            <MenuItem.Icon>
                <DrawingImage>
                    <DrawingImage.Drawing>
                        <GeometryDrawing Brush="{DynamicResource PrimaryTextBrush}" Geometry="{StaticResource Move2NewWindowGeometry}"/>
                    </DrawingImage.Drawing>
                </DrawingImage>
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Icon="{StaticResource SplitScreenDrawingImage}" IsEnabled="{Binding CanSplitScreen}" Header="{u:Lang SplitScreen}">
            <MenuItem.Items>
                <MenuItem Icon="{StaticResource Split2LeftDrawingImage}" Command="hc:ControlCommands.TabCommand" CommandParameter="SplitLeft" Header="{u:Lang ToLeft}"/>
                <MenuItem Icon="{StaticResource Split2RightDrawingImage}" Command="hc:ControlCommands.TabCommand" CommandParameter="SplitRight" Header="{u:Lang ToRight}"/>
                <MenuItem Icon="{StaticResource Split2BottomDrawingImage}" Command="hc:ControlCommands.TabCommand" CommandParameter="SplitBottom" Header="{u:Lang ToBottom}"/>
            </MenuItem.Items>
        </MenuItem>
        <Separator Style="{DynamicResource SeparatorBaseStyle}"/>
        <MenuItem Command="hc:ControlCommands.Close" Header="{u:Lang Close}" InputGestureText="Ctrl + W">
            <MenuItem.Icon>
                <DrawingImage>
                    <DrawingImage.Drawing>
                        <GeometryDrawing Brush="{DynamicResource PrimaryTextBrush}" Geometry="{StaticResource CloseGeometry}"/>
                    </DrawingImage.Drawing>
                </DrawingImage>
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Command="hc:ControlCommands.CloseOther" Header="{u:Lang CloseOtherTabs}"/>
    </ContextMenu>

    <Style x:Key="TabItemExBaseStyle" TargetType="ct:FileTabItem">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
        <Setter Property="BorderThickness" Value="1,0,1,1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Margin" Value="0,0,1,0"/>
        <Setter Property="Padding" Value="10,0,0,0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="ContextMenu" Value="{StaticResource TabItemExMenu}"/>
        <Setter Property="Effect" Value="{StaticResource EffectShadow1}"/>
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ct:FileTabItem">
                    <Grid x:Name="templateRoot" AllowDrop="True" SnapsToDevicePixels="true" ContextMenu="{TemplateBinding ContextMenu}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid Grid.ColumnSpan="3" x:Name="mainBorder">
                            <Border Margin="0" x:Name="mouseOverBorder" CornerRadius="5" Background="{DynamicResource SecondaryRegionBrush}" Opacity="0" />
                            <Border x:Name="selectedGrid" Visibility="Collapsed" CornerRadius="5" Background="{DynamicResource RegionBrush}" />
                        </Grid>
                        <Path x:Name="PathMain" Margin="10,0,0,0" Grid.Column="0" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Icon}"/>
                        <ContentPresenter Grid.Column="1" x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                        <Button Grid.Column="2" Focusable="False" Command="hc:ControlCommands.Close" Background="Transparent" Style="{StaticResource ButtonCustom}" Width="20" Height="20" Margin="4" hc:BorderElement.CornerRadius="2" hc:BackgroundSwitchElement.MouseHoverBackground="{DynamicResource SecondaryBorderBrush}">
                            <Path Fill="{DynamicResource PrimaryTextBrush}" Width="8" Height="8" Style="{StaticResource ClosePathStyle}"/>
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="mouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseInOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="mouseOverBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseInOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter TargetName="selectedGrid" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="hc:IconElement.Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PathMain"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4" TargetName="contentPresenter"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ct:MaximizeToggleButton">
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <hc:SimplePanel Background="{TemplateBinding Background}">
                        <ContentControl Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                            <Path x:Name="MainPath" Fill="{DynamicResource PrimaryTextBrush}" SnapsToDevicePixels="True" Stretch="Uniform" Width="10" Height="10" Data="{StaticResource WindowMaxGeometry}"/>
                        </ContentControl>
                    </hc:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="MainPath" Property="Data" Value="{StaticResource WindowRestoreGeometry}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.8"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>