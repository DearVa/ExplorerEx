<ListView x:Class="ExplorerEx.View.Controls.FileListView"
          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
          xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
          xmlns:e="clr-namespace:ExplorerEx"
          xmlns:hc="https://handyorg.github.io/handycontrol"
          xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
          xmlns:u="clr-namespace:ExplorerEx.Utils"
          xmlns:m="clr-namespace:ExplorerEx.Model"
          xmlns:c="clr-namespace:ExplorerEx.Converter"
          xmlns:ct="clr-namespace:ExplorerEx.View.Controls"
          xmlns:vw="clr-namespace:WpfToolkit.Controls;assembly=VirtualizingWrapPanel"
          xmlns:vm="clr-namespace:ExplorerEx.ViewModel"
          d:DataContext="{d:DesignInstance ct:FileListView}"
          mc:Ignorable="d" AllowDrop="True" SelectionMode="Extended"
          VirtualizingStackPanel.IsVirtualizingWhenGrouping="True"
          VirtualizingStackPanel.IsVirtualizing="True"
          VirtualizingStackPanel.ScrollUnit="Pixel"
          Padding="2" FocusVisualStyle="{x:Null}">
    <ListView.Resources>
        <!--只能将Width设为自动，然后在Cell里Binding到FileDataGrid-->
        <DataTemplate x:Key="IconTemplate">
            <!--https://www.cnblogs.com/wuty/p/15599045.html-->
            <!--此处必须写成Binding Path=xxx，如果省略Path=，语法上没有问题，也能正确绑定，但是会引发一次异常，导致加载速度变慢-->
            <Grid Width="{Binding Path=DataContext.ItemSize.Width, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                  MaxHeight="{Binding Path=DataContext.ItemSize.Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                  VerticalAlignment="Top" d:DataContext="{d:DesignInstance m:FileListViewItem}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="{Binding Path=ActualWidth, Mode=OneWay, RelativeSource={RelativeSource AncestorType=Grid}}"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Image Grid.Row="0" HorizontalAlignment="Center" SnapsToDevicePixels="True" Source="{Binding Icon}"
                       VerticalAlignment="Center" Margin="10"/>
                <TextBlock Grid.Row="1" Text="{Binding DisplayText, Mode=OneWay}" HorizontalAlignment="Center" 
                           TextAlignment="Center" TextTrimming="CharacterEllipsis" TextWrapping="Wrap"
                           Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityReConverter}}"/>
                <hc:TextBox x:Name="RenameTextBox" Grid.Row="1"
                            hc:BorderElement.CornerRadius="3" TextWrapping="Wrap" HorizontalAlignment="Center"
                            Text="{Binding EditingName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                            Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityConverter}}"
                            VerifyFunc="{Binding VerifyFunc, Mode=OneTime}" ErrorPrompt="{u:Lang #InvalidFileName}">
                    <hc:TextBox.Style>
                        <Style TargetType="hc:TextBox" BasedOn="{StaticResource TextBoxPlusBaseStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding EditingName, Converter={StaticResource Object2BooleanConverter}}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=RenameTextBox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </hc:TextBox.Style>
                </hc:TextBox>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="ListTemplate">
            <Grid Width="{Binding Path=DataContext.ItemSize.Width, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                  Height="{Binding Path=DataContext.ItemSize.Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                  HorizontalAlignment="Left" d:DataContext="{d:DesignInstance m:FileListViewItem}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding Path=Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=Grid}}"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Image Grid.Column="0" HorizontalAlignment="Center" SnapsToDevicePixels="True" Source="{Binding Icon}"
                       VerticalAlignment="Center" Margin="5"/>
                <TextBlock Grid.Column="1" Text="{Binding DisplayText, Mode=OneWay}" VerticalAlignment="Center" 
                           TextTrimming="CharacterEllipsis" Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityReConverter}}"/>
                <hc:TextBox x:Name="RenameTextBox" Grid.Column="1" hc:BorderElement.CornerRadius="3" TextWrapping="Wrap" HorizontalAlignment="Center"
                            Text="{Binding EditingName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                            Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityConverter}}"
                            VerifyFunc="{Binding VerifyFunc, Mode=OneTime}" ErrorPrompt="{u:Lang #InvalidFileName}">
                    <hc:TextBox.Style>
                        <Style TargetType="hc:TextBox" BasedOn="{StaticResource TextBoxPlusBaseStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding EditingName, Converter={StaticResource Object2BooleanConverter}}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=RenameTextBox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </hc:TextBox.Style>
                </hc:TextBox>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="TileTemplate">
            <Grid d:DataContext="{d:DesignInstance m:FileListViewItem}"
                  Width="{Binding Path=DataContext.ItemSize.Width, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                  Height="{Binding Path=DataContext.ItemSize.Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding Path=Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=Grid}}"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Image Grid.Column="0" HorizontalAlignment="Center" SnapsToDevicePixels="True" Source="{Binding Icon}"
                       VerticalAlignment="Center" Margin="10"/>
                <Grid Grid.Column="1" Margin="0,5">
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <TextBlock Grid.Row="0" Text="{Binding DisplayText, Mode=OneWay}" HorizontalAlignment="Left" VerticalAlignment="Center"
                               TextTrimming="CharacterEllipsis" Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityReConverter}}"/>
                    <hc:TextBox x:Name="RenameTextBox" Grid.Row="0" hc:BorderElement.CornerRadius="3" HorizontalAlignment="Left"
                                Text="{Binding EditingName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center"
                                Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityConverter}}"
                                VerifyFunc="{Binding VerifyFunc, Mode=OneTime}" ErrorPrompt="{u:Lang #InvalidFileName}">
                        <hc:TextBox.Style>
                            <Style TargetType="hc:TextBox" BasedOn="{StaticResource TextBoxPlusBaseStyle}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding EditingName, Converter={StaticResource Object2BooleanConverter}}" Value="True">
                                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=RenameTextBox}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </hc:TextBox.Style>
                    </hc:TextBox>

                    <TextBlock Grid.Row="1" Text="{Binding Type, Mode=OneWay}" VerticalAlignment="Center" TextTrimming="WordEllipsis"/>
                    <TextBlock Grid.Row="2" Text="{Binding FileSize, Mode=OneWay, Converter={StaticResource Long2FileSizeConverter}}"
                               VerticalAlignment="Center" TextTrimming="WordEllipsis"/>
                </Grid>
            </Grid>
        </DataTemplate>
        <!--主页显示驱动器-->
        <DataTemplate x:Key="TileHomeTemplate">
            <Grid d:DataContext="{d:DesignInstance m:DiskDriveItem}"
                  Width="{Binding Path=DataContext.ItemSize.Width, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                  Height="{Binding Path=DataContext.ItemSize.Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}">
                <Grid Margin="5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Path=Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=Grid}}"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Image Grid.Column="0" Source="{Binding Icon}" VerticalAlignment="Center" Margin="5"/>
                    <StackPanel Grid.Column="1" Orientation="Vertical">
                        <TextBlock Text="{Binding DisplayText, Mode=OneWay}"/>
                        <ProgressBar Value="{Binding FreeSpaceRatio, Mode=OneWay}" 
                                     Foreground="{Binding ProgressBarBackground, Mode=OneWay}"
                                     Maximum="1" BorderThickness="1.5" Margin="0,5,0,5" SnapsToDevicePixels="True"
                                     Visibility="{Binding Drive.IsReady, Converter={StaticResource Boolean2VisibilityConverter}}"/>
                        <TextBlock Text="{Binding SpaceOverviewString, Mode=OneWay}"
                                   Visibility="{Binding Drive.IsReady, Converter={StaticResource Boolean2VisibilityConverter}}"/>
                    </StackPanel>
                </Grid>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="NameColumn">
            <Grid Height="30" VerticalAlignment="Center" d:DataContext="{d:DesignInstance m:FileListViewItem}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Image Grid.Column="0" Source="{Binding Icon}" VerticalAlignment="Center" Margin="5"/>
                <TextBlock Grid.Column="1" Text="{Binding DisplayText, Mode=OneWay}" VerticalAlignment="Center" 
                           Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityReConverter}}"
                           TextTrimming="CharacterEllipsis"/>
                <hc:TextBox x:Name="RenameTextBox" Grid.Column="1" hc:BorderElement.CornerRadius="3"
                            Text="{Binding EditingName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                            Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityConverter}}"
                            VerifyFunc="{Binding VerifyFunc, Mode=OneTime}" ErrorPrompt="{u:Lang #InvalidFileName}">
                    <hc:TextBox.Style>
                        <Style TargetType="hc:TextBox" BasedOn="{StaticResource TextBoxPlusBaseStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding EditingName, Converter={StaticResource Object2BooleanConverter}}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=RenameTextBox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </hc:TextBox.Style>
                </hc:TextBox>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="ModificationDateColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:FileSystemItem}"
                       Text="{Binding DateModified, Mode=OneWay}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="TypeColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:FileListViewItem}"
                       Text="{Binding Type, Mode=OneWay}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="FileSizeColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:FileSystemItem}"
                       Text="{Binding FileSize, Mode=OneWay, Converter={StaticResource Bytes2StringConverter}}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="AvailableSpaceColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:DiskDriveItem}"
                       Text="{Binding FreeSpace, Mode=OneWay, Converter={StaticResource Long2FileSizeConverter}}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="TotalSpaceColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:DiskDriveItem}"
                       Text="{Binding TotalSpace, Mode=OneWay, Converter={StaticResource Long2FileSizeConverter}}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="FillRatioColumn">
            <ProgressBar d:DataContext="{d:DesignInstance m:DiskDriveItem}"
                         Value="{Binding FreeSpaceRatio, Mode=OneWay}" 
                         Foreground="{Binding ProgressBarBackground, Mode=OneWay}"
                         Maximum="1" BorderThickness="1.5" Margin="0,2,0,2" VerticalAlignment="Center" SnapsToDevicePixels="True"
                         Visibility="{Binding Drive.IsReady, Converter={StaticResource Boolean2VisibilityConverter}}">
                <ProgressBar.ToolTip>
                    <TextBlock Text="{Binding FreeSpaceRatio, Mode=OneWay, StringFormat=P%}"/>
                </ProgressBar.ToolTip>
            </ProgressBar>
        </DataTemplate>
        <DataTemplate x:Key="FileSystemColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:DiskDriveItem}"
                       Text="{Binding Drive.DriveFormat, Mode=OneWay}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>

        <!-- 该资源在C#逻辑中获取 -->
        <!-- ReSharper disable once Xaml.RedundantResource -->
        <c:FileGridDataGridColumnsConverter x:Key="ColumnsConverter"
                                        Name="{StaticResource NameColumn}" DateModified="{StaticResource ModificationDateColumn}"
                                        Type="{StaticResource TypeColumn}" FileSize="{StaticResource FileSizeColumn}"
                                        AvailableSpace="{StaticResource AvailableSpaceColumn}" TotalSpace="{StaticResource TotalSpaceColumn}"
                                        FillRatio="{StaticResource FillRatioColumn}" FileSystem="{StaticResource FileSystemColumn}"/>

        <!-- 该资源在C#逻辑中获取 -->
        <!-- ReSharper disable once Xaml.RedundantResource -->
        <c:FileGridListBoxTemplateConverter x:Key="ListBoxTemplateConverter"
                                            IconTemplate="{StaticResource IconTemplate}" ListTemplate="{StaticResource ListTemplate}"
                                            TileTemplate="{StaticResource TileTemplate}" TileHomeTemplate="{StaticResource TileHomeTemplate}"/>

        <ControlTemplate x:Key="FileOperationsTemplate">
            <StackPanel Orientation="Horizontal" d:DataContext="{d:DesignInstance ct:FileListView}">
                <MenuItem ToolTip="{u:Lang Cut}" CommandParameter="Cut"
                          Command="{Binding ViewModel.FileItemCommand}"
                          Icon="{DynamicResource CutDrawingImage}" Style="{StaticResource ButtonLikeMenuItem}"/>
                <MenuItem Margin="3,0,0,0" ToolTip="{u:Lang Copy}" CommandParameter="Copy"
                          Command="{Binding ViewModel.FileItemCommand}"
                          Icon="{DynamicResource CopyDrawingImage}" Style="{StaticResource ButtonLikeMenuItem}"/>
                <MenuItem Margin="3,0,0,0" ToolTip="{u:Lang Rename}" CommandParameter="Rename"
                          Command="{Binding ViewModel.FileItemCommand}"
                          Icon="{DynamicResource RenameDrawingImage}" Style="{StaticResource ButtonLikeMenuItem}"/>
                <MenuItem Margin="3,0,0,0" ToolTip="{u:Lang Delete}" CommandParameter="Delete"
                          Command="{Binding ViewModel.FileItemCommand}"
                          Icon="{DynamicResource DeleteDrawingImage}" Style="{StaticResource ButtonLikeMenuItem}"/>
            </StackPanel>
        </ControlTemplate>

        <ContextMenu x:Key="DiskDriveItemContextMenu" StaysOpen="True" d:DataContext="{d:DesignInstance ct:FileListView}" Style="{StaticResource ContextMenuBaseStyle}">
            <MenuItem Height="35">
                <MenuItem.Template>
                    <ControlTemplate>
                        <StackPanel Orientation="Horizontal" d:DataContext="{d:DesignInstance ct:FileListView}">
                            <MenuItem ToolTip="{u:Lang Copy}" CommandParameter="Copy"
                                      Command="{Binding ViewModel.FileItemCommand}"
                                      Icon="{StaticResource CopyDrawingImage}" Style="{StaticResource ButtonLikeMenuItem}"/>
                            <MenuItem Margin="3,0,0,0" ToolTip="{u:Lang Rename}" CommandParameter="Rename"
                                      Command="{Binding ViewModel.FileItemCommand}"
                                      Icon="{StaticResource RenameDrawingImage}" Style="{StaticResource ButtonLikeMenuItem}"/>
                        </StackPanel>
                    </ControlTemplate>
                </MenuItem.Template>
            </MenuItem>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem CommandParameter="Open" 
                      Command="{Binding ViewModel.FileItemCommand}"
                      Icon="{Binding Path=(m:FileItemAttach.FileItem).Icon, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Header="{u:Lang Open}"/>
            <MenuItem CommandParameter="OpenInNewTab"
                      Command="{Binding ViewModel.FileItemCommand}" 
                      Icon="{DynamicResource ShareDrawingImage}" Header="{u:Lang OpenInNewTab}"/>
            <MenuItem CommandParameter="OpenInNewWindow"
                      Command="{Binding ViewModel.FileItemCommand}" 
                      Icon="{DynamicResource ShareDrawingImage}" Header="{u:Lang OpenInNewWindow}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem CommandParameter="AddToBookmarks"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).IsBookmarked, RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityReConverter}}"
                      Icon="{DynamicResource StarDrawingImage}" Header="{u:Lang AddToBookmarks}"/>
            <MenuItem CommandParameter="RemoveFromBookmarks"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).IsBookmarked, RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{StaticResource UnstarDrawingImage}" Header="{u:Lang RemoveFromBookmarks}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>
            <MenuItem Click="FormatDiskDrive_OnClick" Icon="{StaticResource FormatDriveDrawingImage}"
                      Header="{u:Lang FormatDrive}" Foreground="{DynamicResource DangerBrush}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem CommandParameter="Properties"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Icon="{DynamicResource PropertiesDrawingImage}" Header="{u:Lang Properties}"/>
        </ContextMenu>

        <ContextMenu x:Key="FolderItemContextMenu" d:DataContext="{d:DesignInstance ct:FileListView}">
            <MenuItem Height="35" Template="{StaticResource FileOperationsTemplate}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem CommandParameter="Open"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Icon="{Binding Path=(m:FileItemAttach.FileItem).Icon, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Header="{u:Lang Open}"/>
            <MenuItem CommandParameter="OpenInNewTab"
                      Command="{Binding ViewModel.FileItemCommand}" 
                      Icon="{DynamicResource ShareDrawingImage}" Header="{u:Lang OpenInNewTab}"/>
            <MenuItem CommandParameter="OpenInNewWindow"
                      Command="{Binding ViewModel.FileItemCommand}" 
                      Icon="{DynamicResource ShareDrawingImage}" Header="{u:Lang OpenInNewWindow}"/>
            <MenuItem Header="{u:Lang CopyAsPath}" CommandParameter="CopyAsPath"
                      Command="{Binding Path=ViewModel.FileItemCommand}"
                      Icon="{DynamicResource CopyDrawingImage}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem CommandParameter="AddToBookmarks"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).IsBookmarked, RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityReConverter}}"
                      Icon="{DynamicResource StarDrawingImage}" Header="{u:Lang AddToBookmarks}"/>
            <MenuItem CommandParameter="RemoveFromBookmarks"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).IsBookmarked, RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{DynamicResource UnstarDrawingImage}" Header="{u:Lang RemoveFromBookmarks}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem CommandParameter="Properties"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Icon="{DynamicResource PropertiesDrawingImage}" Header="{u:Lang Properties}"/>
        </ContextMenu>

        <c:FileAssocTemplateSelector x:Key="FileAssocTemplateSelector" DefaultStyle="{StaticResource MenuItemBaseStyle}">
            <c:FileAssocTemplateSelector.CustomStyle>
                <Style BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="MenuItem">
                    <Setter Property="Command" Value="{Binding DataContext.ViewModel.FileItemCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
                    <Setter Property="CommandParameter" Value="{Binding}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Border MinWidth="120" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="5">
                                    <Grid x:Name="Grid" HorizontalAlignment="Left" Margin="4" d:DataContext="{d:DesignInstance m:FileAssocItem}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="30"/>
                                            <ColumnDefinition SharedSizeGroup="MenuItemCPColumnGroup" Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Image Grid.Column="0" Source="{Binding Icon, Mode=OneWay}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}"/>
                                        <TextBlock Grid.Column="1" Margin="9,0,0,0" Text="{Binding Description, Mode=OneWay}" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </c:FileAssocTemplateSelector.CustomStyle>
        </c:FileAssocTemplateSelector>

        <ContextMenu x:Key="FileItemContextMenu" d:DataContext="{d:DesignInstance ct:FileListView}">
            <MenuItem Height="45" Template="{StaticResource FileOperationsTemplate}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem Header="{u:Lang Open}" CommandParameter="Open"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).(m:FileItem.IsExecutable), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityReConverter}}"
                      Icon="{Binding Path=(m:FileItemAttach.FileItem).Icon, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
            <MenuItem Header="{u:Lang Run}" CommandParameter="Open"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).(m:FileItem.IsExecutable), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{Binding Path=(m:FileItemAttach.FileItem).Icon, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
            <MenuItem Header="{u:Lang RunAsAdmin}" CommandParameter="RunAs"
                      Command="{Binding Path=ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).(m:FileItem.IsExecutable), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{DynamicResource UacDrawingImage}"/>
            <MenuItem Header="{u:Lang OpenWith}" ItemContainerStyleSelector="{StaticResource FileAssocTemplateSelector}" Icon="{DynamicResource OpenWithDrawingImage}"
                      Visibility="{Binding Count, Source={x:Static ct:FileListView.FileAssocList}, Mode=OneWay, Converter={StaticResource Int2VisibilityConverter}}">
                <MenuItem.ItemsSource>
                    <CompositeCollection>
                        <CollectionContainer Collection="{Binding Source={x:Static ct:FileListView.FileAssocList}, Mode=OneWay}"/>
                        <Separator Style="{StaticResource SeparatorBaseStyle}"/>
                        <MenuItem Header="{u:Lang ChooseAnotherApp}" Icon="{DynamicResource OpenWithDrawingImage}" Click="ChooseAnotherAppMenuItem_OnClick"/>
                    </CompositeCollection>
                </MenuItem.ItemsSource>
            </MenuItem>
            <MenuItem Header="{u:Lang Edit}" CommandParameter="Edit"
                      Command="{Binding Path=ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).(m:FileItem.IsEditable), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{Binding TextEditor, Source={x:Static e:Settings.Instance}, Mode=OneWay, Converter={StaticResource FileName2IconConverter}}"/>
            <MenuItem Header="{u:Lang Extract}" CommandParameter="Unzip"
                      Command="{Binding Path=ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).(m:FileItem.IsZip), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem Header="{u:Lang OpenFileLocation}" CommandParameter="OpenFileLocation"
                      Command="{Binding Path=ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).(m:FileItem.IsLink), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{DynamicResource ShareDrawingImage}"/>
            <MenuItem Header="{u:Lang CopyAsPath}" CommandParameter="CopyAsPath"
                      Command="{Binding Path=ViewModel.FileItemCommand}"
                      Icon="{DynamicResource CopyDrawingImage}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem CommandParameter="AddToBookmarks"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).IsBookmarked, RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityReConverter}}"
                      Icon="{DynamicResource StarDrawingImage}" Header="{u:Lang AddToBookmarks}"/>
            <MenuItem CommandParameter="RemoveFromBookmarks"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Visibility="{Binding Path=(m:FileItemAttach.FileItem).IsBookmarked, RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{DynamicResource UnstarDrawingImage}" Header="{u:Lang RemoveFromBookmarks}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem CommandParameter="Properties"
                      Command="{Binding ViewModel.FileItemCommand}"
                      Icon="{DynamicResource PropertiesDrawingImage}" Header="{u:Lang Properties}"/>
        </ContextMenu>

        <c:FileSystemItemContextMenuConverter x:Key="FileSystemItemContextMenuConverter"
                                              DiskDriveContextMenu="{StaticResource DiskDriveItemContextMenu}"
                                              FolderContextMenu="{StaticResource FolderItemContextMenu}"
                                              FileContextMenu="{StaticResource FileItemContextMenu}"/>

        <ControlTemplate x:Key="ListViewItemTemplate" TargetType="ListViewItem">
            <Border CornerRadius="4" x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                <ContentPresenter/>
            </Border>
        </ControlTemplate>

        <ControlTemplate x:Key="GridViewItemTemplate" TargetType="ListViewItem">
            <Border CornerRadius="4" Margin="2,0" x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" HorizontalAlignment="Left">
                <GridViewRowPresenter Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}" HorizontalAlignment="Left"/>
            </Border>
        </ControlTemplate>

        <c:Object2ObjectConverter x:Key="ItemTemplateConverter" Object1="{StaticResource ListViewItemTemplate}" Object2="{StaticResource GridViewItemTemplate}"/>
        
        <!-- 该资源在C#逻辑中获取 -->
        <!-- ReSharper disable once Xaml.RedundantResource -->
        <ItemsPanelTemplate x:Key="VirtualizingWrapPanel">
            <vw:VirtualizingWrapPanel Background="Transparent" CanHorizontallyScroll="False" VirtualizationMode="Recycling" SnapsToDevicePixels="True" ItemSize="{Binding ActualItemSize, RelativeSource={RelativeSource AncestorType=ListView}}"/>
        </ItemsPanelTemplate>

        <!-- 该资源在C#逻辑中获取 -->
        <!-- ReSharper disable once Xaml.RedundantResource -->
        <ItemsPanelTemplate x:Key="VirtualizingStackPanel">
            <VirtualizingStackPanel Background="Transparent" CanHorizontallyScroll="False" VirtualizationMode="Recycling" SnapsToDevicePixels="True"/>
        </ItemsPanelTemplate>
    </ListView.Resources>

    <ListView.ContextMenu>
        <ContextMenu d:DataContext="{d:DesignInstance vm:FileTabViewModel}">
            <MenuItem Click="NewFolder_OnClick" Icon="{DynamicResource NewFolderDrawingImage}" Header="{u:Lang New_folder}"
                      Visibility="{Binding Folder.FullPath, Converter={StaticResource Object2VisibilityConverter}}"/>
            <MenuItem Icon="{DynamicResource ListDrawingImage}" Header="{u:Lang View}">
                <MenuItem.Items>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="0" Header="{u:Lang LargeIcons}" Icon="{DynamicResource LargeIconsDrawingImage}"
                              IsChecked="{Binding FileView.FileViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=0}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="1" Header="{u:Lang SmallIcons}" Icon="{DynamicResource SmallIconsDrawingImage}"
                              IsChecked="{Binding FileView.FileViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=1}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="2" Header="{u:Lang List}" Icon="{DynamicResource ListDrawingImage}"
                              IsChecked="{Binding FileView.FileViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=2}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="3" Header="{u:Lang Details}" Icon="{DynamicResource DetailsDrawingImage}"
                              IsChecked="{Binding FileView.FileViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=3}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="4" Header="{u:Lang Tiles}" Icon="{DynamicResource TilesDrawingImage}"
                              IsChecked="{Binding FileView.FileViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=4}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="5" Header="{u:Lang Content}" Icon="{DynamicResource ContentDrawingImage}"
                              IsChecked="{Binding FileView.FileViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=5}"/>
                </MenuItem.Items>
            </MenuItem>
            <MenuItem Icon="{DynamicResource SortDrawingImage}" Header="{u:Lang Sort}">
                <MenuItem.Items>
                    <MenuItem CommandParameter="6" Command="{Binding SwitchViewCommand}" Header="{u:Lang Name}" 
                              IsChecked="{Binding FileView.SortByIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=0}"/>
                    <MenuItem CommandParameter="7" Command="{Binding SwitchViewCommand}" Header="{u:Lang DateModified}"
                              IsChecked="{Binding FileView.SortByIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=1}"/>
                    <MenuItem CommandParameter="8" Command="{Binding SwitchViewCommand}" Header="{u:Lang Type}"
                              IsChecked="{Binding FileView.SortByIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=2}"/>
                    <MenuItem CommandParameter="9" Command="{Binding SwitchViewCommand}" Header="{u:Lang FileSize}"
                              IsChecked="{Binding FileView.SortByIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=3}"/>
                    <Separator Style="{StaticResource SeparatorBaseStyle}"/>

                    <MenuItem CommandParameter="10" Command="{Binding SwitchViewCommand}" Header="{u:Lang Ascending}"
                              IsChecked="{Binding FileView.IsAscending, Mode=OneWay}"/>
                    <MenuItem CommandParameter="11" Command="{Binding SwitchViewCommand}" Header="{u:Lang Descending}"
                              IsChecked="{Binding FileView.IsAscending, Mode=OneWay, Converter={StaticResource Boolean2BooleanReConverter}}"/>
                </MenuItem.Items>
            </MenuItem>
            <MenuItem Header="{u:Lang GroupBy}">
                <MenuItem.Items>
                    <MenuItem CommandParameter="12" Command="{Binding SwitchViewCommand}" Header="{u:Lang None}" 
                                      IsChecked="{Binding FileView.GroupByIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=-1}"/>
                    <MenuItem CommandParameter="13" Command="{Binding SwitchViewCommand}" Header="{u:Lang Name}" 
                                      IsChecked="{Binding FileView.GroupByIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=0}"/>
                    <MenuItem CommandParameter="14" Command="{Binding SwitchViewCommand}" Header="{u:Lang DateModified}"
                                      IsChecked="{Binding FileView.GroupByIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=1}"/>
                    <MenuItem CommandParameter="15" Command="{Binding SwitchViewCommand}" Header="{u:Lang Type}"
                                      IsChecked="{Binding FileView.GroupByIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=2}"/>
                    <MenuItem CommandParameter="16" Command="{Binding SwitchViewCommand}" Header="{u:Lang FileSize}"
                                      IsChecked="{Binding FileView.GroupByIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=3}"/>
                </MenuItem.Items>
            </MenuItem>
            <MenuItem Click="Refresh_OnClick" Icon="{DynamicResource RefreshDrawingImage}" Header="{u:Lang Refresh}"/>
            <Separator Style="{StaticResource SeparatorBaseStyle}"/>

            <MenuItem CommandParameter="Terminal" Command="{Binding FileItemCommand}"
                      Visibility="{Binding Folder.FullPath, Converter={StaticResource Object2VisibilityConverter}}"
                      Icon="{Binding Source={x:Static u:Terminal.TerminalIcon}}" Header="{u:Lang OpenInTerminal}"/>
            <MenuItem CommandParameter="Properties"
                      Command="{Binding FileItemCommand}"
                      Icon="{DynamicResource PropertiesDrawingImage}" Header="{u:Lang Properties}"/>
        </ContextMenu>
    </ListView.ContextMenu>

    <ListView.Template>
        <ControlTemplate TargetType="ListView">
            <hc:SimplePanel>
                <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
                    <hc:ToggleBlock.IsChecked>
                        <MultiBinding Converter="{StaticResource BooleanArr2BooleanConverter}">
                            <Binding Path="HasItems" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                            <Binding Path="ViewModel.IsLoading" RelativeSource="{RelativeSource AncestorType=ct:FileListView}" Converter="{StaticResource Boolean2BooleanReConverter}" Mode="OneWay"/>
                        </MultiBinding>
                    </hc:ToggleBlock.IsChecked>
                    <hc:ToggleBlock.CheckedContent>
                        <Grid SnapsToDevicePixels="True" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <GridViewHeaderRowPresenter Grid.Row="0" Visibility="{Binding View, Converter={StaticResource Object2VisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                                        ColumnHeaderContainerStyle="{Binding View.(GridView.ColumnHeaderContainerStyle), RelativeSource={RelativeSource TemplatedParent}}" 
                                                        ColumnHeaderToolTip="{Binding View.(GridView.ColumnHeaderToolTip), RelativeSource={RelativeSource TemplatedParent}}" 
                                                        ColumnHeaderContextMenu="{Binding View.(GridView.ColumnHeaderContextMenu), RelativeSource={RelativeSource TemplatedParent}}" 
                                                        ColumnHeaderTemplate="{Binding View.(GridView.ColumnHeaderTemplate), RelativeSource={RelativeSource TemplatedParent}}" 
                                                        Columns="{Binding View.(GridView.Columns), RelativeSource={RelativeSource TemplatedParent}}" 
                                                        Margin="2,2,2,0" SnapsToDevicePixels="True"/>
                            <ScrollViewer x:Name="ViewScrollViewer" Background="{x:Null}" Grid.Row="1" CanContentScroll="True">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Grid>
                    </hc:ToggleBlock.CheckedContent>
                    <hc:ToggleBlock.UnCheckedContent>
                        <hc:SimplePanel Background="Transparent">
                            <TextBlock Text="{u:Lang ThisIsAnEmptyFolder}" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="14"
                                       Visibility="{Binding Path=ViewModel.(vm:FileTabViewModel.IsLoading), Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileListView}, Converter={StaticResource Boolean2VisibilityReConverter}}"/>
                            <TextBlock Text="{u:Lang Loading}" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="14"
                                       Visibility="{Binding Path=ViewModel.(vm:FileTabViewModel.IsLoading), Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileListView}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
                        </hc:SimplePanel>
                    </hc:ToggleBlock.UnCheckedContent>
                </hc:ToggleBlock>
                <hc:SimplePanel x:Name="ContentPanel" ClipToBounds="True">
                    <Border x:Name="SelectionRect" CornerRadius="3" Background="#66326cf3" BorderBrush="{DynamicResource PrimaryBrush}" BorderThickness="1" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                </hc:SimplePanel>
            </hc:SimplePanel>
        </ControlTemplate>
    </ListView.Template>

    <ListView.ItemContainerStyle>
        <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemBaseStyle}">
            <Setter Property="ContextMenu" Value="{Binding Converter={StaticResource FileSystemItemContextMenuConverter}}"/>
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
            <Setter Property="Margin" Value="0,2"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Template" Value="{Binding View, Converter={StaticResource ItemTemplateConverter}, RelativeSource={RelativeSource AncestorType=ListView}}"/>
        </Style>
    </ListView.ItemContainerStyle>

    <ListView.GroupStyle>
        <GroupStyle x:Name="FileGroupStyle">
            <GroupStyle.ContainerStyle>
                <Style TargetType="GroupItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type GroupItem}">
                                <Expander IsExpanded="True" ExpandDirection="Down">
                                    <Expander.Header>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{Binding Path=Name}" VerticalAlignment="Center" />
                                            <TextBlock Text="{Binding Path=ItemCount, StringFormat= ({0})}" VerticalAlignment="Center" Margin="5,0,0,0" />
                                        </StackPanel>
                                    </Expander.Header>
                                    <ItemsPresenter/>
                                </Expander>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </GroupStyle.ContainerStyle>
        </GroupStyle>
    </ListView.GroupStyle>
</ListView>
