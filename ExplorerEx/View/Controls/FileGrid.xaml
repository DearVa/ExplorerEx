<Grid x:Class="ExplorerEx.View.Controls.FileGrid"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:e="clr-namespace:ExplorerEx"
      xmlns:hc="https://handyorg.github.io/handycontrol"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:u="clr-namespace:ExplorerEx.Utils"
      xmlns:m="clr-namespace:ExplorerEx.Model"
      xmlns:c="clr-namespace:ExplorerEx.Converter"
      xmlns:ct="clr-namespace:ExplorerEx.View.Controls"
      xmlns:vw="clr-namespace:WpfToolkit.Controls;assembly=VirtualizingWrapPanel"
      d:DataContext="{d:DesignInstance ct:FileGrid}"
      mc:Ignorable="d" AllowDrop="True">
    <Grid.Resources>
        <!--只能将Width设为自动，然后在Cell里Binding到FileDataGrid-->
        <DataTemplate x:Key="IconTemplate">
            <!--https://www.cnblogs.com/wuty/p/15599045.html-->
            <!--此处必须写成Binding Path=xxx，如果省略Path=，语法上没有问题，也能正确绑定，但是会引发一次异常，导致加载速度变慢-->
            <Grid Width="{Binding Path=(ct:FileGrid.ItemSize).Width, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}"
                  Height="{Binding Path=(ct:FileGrid.ItemSize).Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}" 
                  d:DataContext="{d:DesignInstance m:FileViewBaseItem}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="{Binding Path=(ct:FileGrid.ItemSize).Width, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Image Grid.Row="0" HorizontalAlignment="Center" SnapsToDevicePixels="True" Source="{Binding Icon}"
                       VerticalAlignment="Center" Margin="10"/>
                <TextBlock Grid.Row="1" Text="{Binding DisplayText, Mode=OneWay}" HorizontalAlignment="Center" 
                           TextAlignment="Center" TextTrimming="WordEllipsis" TextWrapping="Wrap"
                           Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityReConverter}}"/>
                <hc:TextBox x:Name="RenameTextBox" Grid.Row="1"
                            hc:BorderElement.CornerRadius="3" TextWrapping="Wrap" HorizontalAlignment="Center"
                            Text="{Binding EditingName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                            Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityConverter}}"
                            VerifyFunc="{Binding VerifyFunc, Mode=OneTime}" IsError="{Binding IsErrorFileName, Mode=OneWayToSource}">
                    <hc:Interaction.Triggers>
                        <hc:RoutedEventTrigger RoutedEvent="TextBox.LostFocus">
                            <hc:EventToCommand Command="{Binding LostFocusCommand}" PassEventArgsToCommand="True"/>
                        </hc:RoutedEventTrigger>
                    </hc:Interaction.Triggers>
                    <hc:TextBox.Style>
                        <Style TargetType="hc:TextBox" BasedOn="{StaticResource TextBoxPlusBaseStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding EditingName, Converter={StaticResource Object2BooleanConverter}}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=RenameTextBox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </hc:TextBox.Style>
                </hc:TextBox>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="ListTemplate">
            <Grid Width="{Binding Path=(ct:FileGrid.ItemSize).Width, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}"
                  Height="{Binding Path=(ct:FileGrid.ItemSize).Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}" 
                  HorizontalAlignment="Left" d:DataContext="{d:DesignInstance m:FileViewBaseItem}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding Path=(ct:FileGrid.ItemSize).Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Image Grid.Column="0" HorizontalAlignment="Center" SnapsToDevicePixels="True" Source="{Binding Icon}"
                       VerticalAlignment="Center" Margin="5"/>
                <TextBlock Grid.Column="1" Text="{Binding DisplayText, Mode=OneWay}" VerticalAlignment="Center" 
                           TextTrimming="WordEllipsis" Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityReConverter}}"/>
                <hc:TextBox x:Name="RenameTextBox" Grid.Column="1" hc:BorderElement.CornerRadius="3" TextWrapping="Wrap" HorizontalAlignment="Center"
                            Text="{Binding EditingName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                            Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityConverter}}"
                            VerifyFunc="{Binding VerifyFunc, Mode=OneTime}" IsError="{Binding IsErrorFileName, Mode=OneWayToSource}">
                    <hc:Interaction.Triggers>
                        <hc:RoutedEventTrigger RoutedEvent="TextBox.LostFocus">
                            <hc:EventToCommand Command="{Binding LostFocusCommand}" PassEventArgsToCommand="True"/>
                        </hc:RoutedEventTrigger>
                    </hc:Interaction.Triggers>
                    <hc:TextBox.Style>
                        <Style TargetType="hc:TextBox" BasedOn="{StaticResource TextBoxPlusBaseStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding EditingName, Converter={StaticResource Object2BooleanConverter}}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=RenameTextBox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </hc:TextBox.Style>
                </hc:TextBox>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="TileTemplate">
            <Grid d:DataContext="{d:DesignInstance m:FileViewBaseItem}"
                  Width="{Binding Path=(ct:FileGrid.ItemSize).Width, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}"
                  Height="{Binding Path=(ct:FileGrid.ItemSize).Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding Path=(ct:FileGrid.ItemSize).Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Image Grid.Column="0" HorizontalAlignment="Center" SnapsToDevicePixels="True" Source="{Binding Icon}"
                       VerticalAlignment="Center" Margin="10"/>
                <Grid Grid.Column="1" Margin="0,5">
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <TextBlock Grid.Row="0" Text="{Binding DisplayText, Mode=OneWay}" HorizontalAlignment="Left" VerticalAlignment="Center"
                               TextTrimming="WordEllipsis" Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityReConverter}}"/>
                    <hc:TextBox x:Name="RenameTextBox" Grid.Row="0" hc:BorderElement.CornerRadius="3" HorizontalAlignment="Left"
                                Text="{Binding EditingName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center"
                                Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityConverter}}"
                                VerifyFunc="{Binding VerifyFunc, Mode=OneTime}" IsError="{Binding IsErrorFileName, Mode=OneWayToSource}">
                        <hc:Interaction.Triggers>
                            <hc:RoutedEventTrigger RoutedEvent="TextBox.LostFocus">
                                <hc:EventToCommand Command="{Binding LostFocusCommand}" PassEventArgsToCommand="True"/>
                            </hc:RoutedEventTrigger>
                        </hc:Interaction.Triggers>
                        <hc:TextBox.Style>
                            <Style TargetType="hc:TextBox" BasedOn="{StaticResource TextBoxPlusBaseStyle}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding EditingName, Converter={StaticResource Object2BooleanConverter}}" Value="True">
                                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=RenameTextBox}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </hc:TextBox.Style>
                    </hc:TextBox>

                    <TextBlock Grid.Row="1" Text="{Binding Type, Mode=OneWay}" VerticalAlignment="Center" TextTrimming="WordEllipsis"/>
                    <TextBlock Grid.Row="2" Text="{Binding FileSize, Mode=OneWay, Converter={StaticResource Long2FileSizeConverter}}"
                               VerticalAlignment="Center" TextTrimming="WordEllipsis"/>
                </Grid>
            </Grid>
        </DataTemplate>
        <!--主页显示驱动器-->
        <DataTemplate x:Key="TileHomeTemplate">
            <Grid d:DataContext="{d:DesignInstance m:DiskDrive}"
                  Width="{Binding Path=(ct:FileGrid.ItemSize).Width, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}"
                  Height="{Binding Path=(ct:FileGrid.ItemSize).Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}">
                <Grid Margin="5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Path=(ct:FileGrid.ItemSize).Height, Mode=OneWay, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Image Grid.Column="0" Source="{Binding Icon}" VerticalAlignment="Center" Margin="5"/>
                    <StackPanel Grid.Column="1" Orientation="Vertical">
                        <TextBlock Text="{Binding DisplayText, Mode=OneWay}"/>
                        <ProgressBar Value="{Binding FreeSpaceRatio, Mode=OneWay}" 
                                     Foreground="{Binding ProgressBarBackground, Mode=OneWay}"
                                     Maximum="1" BorderThickness="1.5" Margin="0,5,0,5" 
                                     SnapsToDevicePixels="True" hc:ProgressBarAttach.AnimationDisabled="True"
                                     Visibility="{Binding Driver.IsReady, Converter={StaticResource Boolean2VisibilityConverter}}"/>
                        <TextBlock Text="{Binding SpaceOverviewString, Mode=OneWay}"
                                   Visibility="{Binding Driver.IsReady, Converter={StaticResource Boolean2VisibilityConverter}}"/>
                    </StackPanel>
                </Grid>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="NameColumn">
            <Grid Height="30" VerticalAlignment="Center" d:DataContext="{d:DesignInstance m:FileViewBaseItem}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Image Grid.Column="0" Source="{Binding Icon}" VerticalAlignment="Center" Margin="5"/>
                <TextBlock Grid.Column="1" Text="{Binding DisplayText, Mode=OneWay}" VerticalAlignment="Center" 
                           Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityReConverter}}"/>
                <hc:TextBox x:Name="RenameTextBox" Grid.Column="1" hc:BorderElement.CornerRadius="3"
                            Text="{Binding EditingName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" 
                            Visibility="{Binding EditingName, Converter={StaticResource Object2VisibilityConverter}}"
                            VerifyFunc="{Binding VerifyFunc, Mode=OneTime}" IsError="{Binding IsErrorFileName, Mode=OneWayToSource}">
                    <hc:Interaction.Triggers>
                        <hc:RoutedEventTrigger RoutedEvent="TextBox.LostFocus">
                            <hc:EventToCommand Command="{Binding LostFocusCommand}" PassEventArgsToCommand="True"/>
                        </hc:RoutedEventTrigger>
                    </hc:Interaction.Triggers>
                    <hc:TextBox.Style>
                        <Style TargetType="hc:TextBox" BasedOn="{StaticResource TextBoxPlusBaseStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding EditingName, Converter={StaticResource Object2BooleanConverter}}" Value="True">
                                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=RenameTextBox}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </hc:TextBox.Style>
                </hc:TextBox>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="ModificationDateColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:FileSystemItem}"
                       Text="{Binding LastWriteTime, Mode=OneWay}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="TypeColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:FileViewBaseItem}"
                       Text="{Binding Type, Mode=OneWay}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="FileSizeColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:FileSystemItem}"
                       Text="{Binding FileSize, Mode=OneWay, Converter={StaticResource Bytes2StringConverter}}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="AvailableSpaceColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:DiskDrive}"
                       Text="{Binding FreeSpace, Mode=OneWay, Converter={StaticResource Long2FileSizeConverter}}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="TotalSpaceColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:DiskDrive}"
                       Text="{Binding TotalSpace, Mode=OneWay, Converter={StaticResource Long2FileSizeConverter}}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>
        <DataTemplate x:Key="FillRatioColumn">
            <ProgressBar d:DataContext="{d:DesignInstance m:DiskDrive}"
                         Value="{Binding FreeSpaceRatio, Mode=OneWay}" 
                         Foreground="{Binding ProgressBarBackground, Mode=OneWay}"
                         Maximum="1" BorderThickness="1.5" Margin="0,2,0,2" 
                         VerticalAlignment="Center" SnapsToDevicePixels="True" hc:ProgressBarAttach.AnimationDisabled="True"
                         Visibility="{Binding Driver.IsReady, Converter={StaticResource Boolean2VisibilityConverter}}">
                <ProgressBar.ToolTip>
                    <TextBlock>
                        <Run Text="{Binding FreeSpaceRatio, Mode=OneWay, StringFormat=P}"/>
                        <Run Text="%"/>
                    </TextBlock>
                </ProgressBar.ToolTip>
            </ProgressBar>
        </DataTemplate>
        <DataTemplate x:Key="FileSystemColumn">
            <TextBlock d:DataContext="{d:DesignInstance m:DiskDrive}"
                       Text="{Binding Driver.DriveFormat, Mode=OneWay}" 
                       VerticalAlignment="Center"
                       IsHitTestVisible="False"/>
        </DataTemplate>

        <!-- 该资源在C#逻辑中获取 -->
        <!-- ReSharper disable once Xaml.RedundantResource -->
        <c:FileGridDataGridColumnsConverter x:Key="ColumnsConverter"
                                        Name="{StaticResource NameColumn}" ModificationDate="{StaticResource ModificationDateColumn}"
                                        Type="{StaticResource TypeColumn}" FileSize="{StaticResource FileSizeColumn}"
                                        AvailableSpace="{StaticResource AvailableSpaceColumn}" TotalSpace="{StaticResource TotalSpaceColumn}"
                                        FillRatio="{StaticResource FillRatioColumn}" FileSystem="{StaticResource FileSystemColumn}"/>

        <c:FileGridListBoxTemplateConverter x:Key="ListBoxTemplateConverter"
                                            IconTemplate="{StaticResource IconTemplate}" ListTemplate="{StaticResource ListTemplate}"
                                            TileTemplate="{StaticResource TileTemplate}" TileHomeTemplate="{StaticResource TileHomeTemplate}"/>

        <ControlTemplate x:Key="FileOperationsTemplate">
            <StackPanel Orientation="Horizontal" d:DataContext="{d:DesignInstance m:FileViewBaseItem}">
                <Button Height="35" ToolTip="{u:Lang Cut}" Click="Cut_OnClick">
                    <Image Width="20" Height="20" Source="{StaticResource CutDrawingImage}"/>
                </Button>
                <Button Height="35" Margin="6,0,0,0" ToolTip="{u:Lang Copy}" Click="Copy_OnClick">
                    <Image Width="20" Height="20" Source="{StaticResource CopyDrawingImage}"/>
                </Button>
                <Button Height="35" Margin="6,0,0,0" ToolTip="{u:Lang Rename}" Click="Rename_OnClick">
                    <Image Width="20" Height="20" Source="{StaticResource RenameDrawingImage}"/>
                </Button>
                <Button Height="35" Margin="6,0,0,0" ToolTip="{u:Lang Delete}" Click="Delete_OnClick">
                    <Image Width="20" Height="20" Source="{StaticResource DeleteDrawingImage}"/>
                </Button>
            </StackPanel>
        </ControlTemplate>

        <ContextMenu x:Key="FolderItemContextMenu" d:DataContext="{d:DesignInstance m:FileSystemItem}">
            <MenuItem Height="45" Template="{StaticResource FileOperationsTemplate}"/>
            <Separator/>

            <MenuItem Click="Open_OnClick"
                      Icon="{Binding Icon}" Header="{u:Lang Open}"/>
            <MenuItem Click="OpenInNewTab_OnClick" 
                      Icon="{StaticResource ShareDrawingImage}" Header="{u:Lang Open_in_new_Tab}"/>
            <MenuItem Click="OpenInNewWindow_OnClick" 
                      Icon="{StaticResource ShareDrawingImage}" Header="{u:Lang Open_in_new_Window}"/>
            <Separator/>

            <MenuItem Click="AddToBookmarks_OnClick"
                      Visibility="{Binding IsBookmarked, Mode=OneWay, Converter={StaticResource Boolean2VisibilityReConverter}}"
                      Icon="{StaticResource StarDrawingImage}" Header="{u:Lang Add_to_bookmarks}"/>
            <MenuItem Click="RemoveFromBookmarks_OnClick"
                      Visibility="{Binding IsBookmarked, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{StaticResource UnstarDrawingImage}" Header="{u:Lang Remove_from_bookmarks}"/>
            <Separator/>

            <MenuItem Click="ShowProperties_OnClick"
                      Icon="{StaticResource PropertiesDrawingImage}" Header="{u:Lang Properties}"/>
        </ContextMenu>

        <ContextMenu x:Key="FileItemContextMenu" d:DataContext="{d:DesignInstance m:FileSystemItem}">
            <MenuItem Height="45" Template="{StaticResource FileOperationsTemplate}"/>
            <Separator/>

            <MenuItem Click="Open_OnClick" Header="{u:Lang Open}"
                      Visibility="{Binding IsRunnable, Mode=OneWay, Converter={StaticResource Boolean2VisibilityReConverter}}"
                      Icon="{Binding Icon}"/>
            <MenuItem Click="Open_OnClick" Header="{u:Lang Run}"
                      Visibility="{Binding IsRunnable, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{Binding Icon}"/>
            <MenuItem Click="OpenAsAdmin_OnClick" Header="{u:Lang Run_as_admin}"
                      Visibility="{Binding IsRunnable, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{StaticResource UacDrawingImage}"/>
            <MenuItem Command="{Binding EditCommand}" Header="{u:Lang Edit}"
                      Visibility="{Binding IsEditable, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{Binding TextEditor, Source={x:Static e:Settings.Instance}, Mode=OneWay, Converter={StaticResource FileName2IconConverter}}"/>
            <Separator/>

            <MenuItem Click="AddToBookmarks_OnClick" Header="{u:Lang Add_to_bookmarks}"
                      Visibility="{Binding IsBookmarked, Mode=OneWay, Converter={StaticResource Boolean2VisibilityReConverter}}"
                      Icon="{StaticResource StarDrawingImage}"/>
            <MenuItem Click="RemoveFromBookmarks_OnClick" Header="{u:Lang Remove_from_bookmarks}"
                      Visibility="{Binding IsBookmarked, Mode=OneWay, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Icon="{StaticResource UnstarDrawingImage}"/>
            <Separator/>

            <MenuItem Click="ShowProperties_OnClick"
                      Icon="{StaticResource PropertiesDrawingImage}" Header="{u:Lang Properties}"/>
        </ContextMenu>

        <c:FileSystemItemContextMenuConverter x:Key="FileSystemItemContextMenuConverter"
                                              FolderContextMenu="{StaticResource FolderItemContextMenu}"
                                              FileContextMenu="{StaticResource FileItemContextMenu}"/>
    </Grid.Resources>

    <Grid.ContextMenu>
        <ContextMenu>
            <MenuItem Click="NewFolder_OnClick"
                      Icon="{StaticResource NewFolderDrawingImage}" Header="{u:Lang New_folder}"/>
            <MenuItem Icon="{StaticResource ListDrawingImage}" Header="{u:Lang View}">
                <MenuItem.Items>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="0" Header="{u:Lang Big_icon}" 
                              IsChecked="{Binding ViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=0}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="1" Header="{u:Lang Small_icon}"
                              IsChecked="{Binding ViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=1}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="2" Header="{u:Lang List}"
                              IsChecked="{Binding ViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=2}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="3" Header="{u:Lang Detail}"
                              IsChecked="{Binding ViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=3}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="4" Header="{u:Lang Tile}"
                              IsChecked="{Binding ViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=4}"/>
                    <MenuItem Command="{Binding SwitchViewCommand}" CommandParameter="5" Header="{u:Lang Content}"
                              IsChecked="{Binding ViewTypeIndex, Mode=OneWay, Converter={StaticResource Equality2BooleanConverter}, ConverterParameter=5}"/>
                </MenuItem.Items>
            </MenuItem>
            <MenuItem Click="Refresh_OnClick"
                      Icon="{StaticResource RefreshDrawingImage}" Header="{u:Lang Refresh}"/>
            <Separator/>

            <MenuItem Click="ShowProperties_OnClick"
                      Icon="{StaticResource PropertiesDrawingImage}" Header="{u:Lang Properties}"/>
        </ContextMenu>
    </Grid.ContextMenu>

    <DataGrid x:Name="DataGrid"
              Background="{x:Null}" SelectionMode="Extended" 
              AutoGenerateColumns="False" ColumnHeaderHeight="25"
              RowHeight="{Binding ItemSize.Height, Mode=OneWay}"
              Foreground="{DynamicResource PrimaryTextBrush}"
              VirtualizingStackPanel.IsVirtualizing="True"
              VirtualizingStackPanel.ScrollUnit="Pixel">
        <DataGrid.Template>
            <ControlTemplate TargetType="DataGrid">
                <ControlTemplate.Resources>
                    <Storyboard x:Key="Storyboard1">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
                            <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8"/>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
                            <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                    <Storyboard x:Key="Storyboard2">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
                            <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
                            <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </ControlTemplate.Resources>
                <Grid>
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="ScrollViewer">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.ColumnSpan="2" Grid.Row="0" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                                        <hc:ToggleBlock IsChecked="{Binding HasItems,RelativeSource={RelativeSource AncestorType=DataGrid},Mode=OneWay}" Grid.ColumnSpan="3" 
                                                        Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" 
                                                        DataContext="{Binding Folder, RelativeSource={RelativeSource AncestorType=ct:FileGrid}}">
                                            <hc:ToggleBlock.CheckedContent>
                                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                                            </hc:ToggleBlock.CheckedContent>
                                            <hc:ToggleBlock.UnCheckedContent>
                                                <hc:Empty />
                                            </hc:ToggleBlock.UnCheckedContent>
                                        </hc:ToggleBlock>
                                        <ScrollBar Style="{StaticResource ScrollBarBaseStyle}" Opacity="0" x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                        <ScrollBar Style="{StaticResource ScrollBarBaseStyle}" Opacity="0" x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" VerticalAlignment="Bottom" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <EventTrigger RoutedEvent="MouseEnter">
                                            <BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
                                        </EventTrigger>
                                        <EventTrigger RoutedEvent="MouseLeave">
                                            <BeginStoryboard Storyboard="{StaticResource Storyboard2}"/>
                                        </EventTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </Grid>
            </ControlTemplate>
        </DataGrid.Template>

        <DataGrid.RowStyle>
            <Style TargetType="DataGridRow" BasedOn="{StaticResource DataGridRowStyle}">
                <Setter Property="ContextMenu" Value="{Binding IsFolder, Converter={StaticResource FileSystemItemContextMenuConverter}}"/>
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
            </Style>
        </DataGrid.RowStyle>

        <DataGrid.CellStyle>
            <Style TargetType="DataGridCell">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="Padding" Value="10,0"/>
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="DataGridCell">
                            <Border CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                            <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}" Value="Cell"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="False"/>
                            <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}" Value="CellOrRowHeader"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True"/>
                            <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}" Value="CellOrRowHeader"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                            <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}" Value="FullRow"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}"/>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>
        </DataGrid.CellStyle>
    </DataGrid>

    <ListBox x:Name="ListBox"
             ItemTemplate="{Binding FileViewType, Mode=OneWay, Converter={StaticResource ListBoxTemplateConverter}}"
             Foreground="{DynamicResource PrimaryTextBrush}"
             hc:BorderElement.CornerRadius="5"
             VirtualizingStackPanel.IsVirtualizing="True"
             VirtualizingStackPanel.ScrollUnit="Pixel">
        <ListBox.ItemsPanel>
            <ItemsPanelTemplate>
                <vw:VirtualizingWrapPanel CanHorizontallyScroll="False" VirtualizationMode="Recycling" SnapsToDevicePixels="True"/>
            </ItemsPanelTemplate>
        </ListBox.ItemsPanel>

        <ListBox.ItemContainerStyle>
            <Style TargetType="ListBoxItem" BasedOn="{StaticResource ListBoxItemBaseStyle}">
                <Setter Property="ContextMenu" Value="{Binding IsFolder, Converter={StaticResource FileSystemItemContextMenuConverter}}"/>
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                <Setter Property="Margin" Value="0,4"/>
            </Style>
        </ListBox.ItemContainerStyle>
    </ListBox>

    <Grid x:Name="ContentGrid" ClipToBounds="True">
        <Border x:Name="SelectionRect" CornerRadius="3" Background="#66326cf3" BorderBrush="{DynamicResource PrimaryBrush}" BorderThickness="1" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Top"/>
    </Grid>
</Grid>
